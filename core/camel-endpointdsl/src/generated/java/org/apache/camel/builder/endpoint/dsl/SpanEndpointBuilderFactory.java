/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.builder.endpoint.dsl;

import javax.annotation.Generated;
import org.apache.camel.builder.EndpointConsumerBuilder;
import org.apache.camel.builder.EndpointProducerBuilder;
import org.apache.camel.builder.endpoint.AbstractEndpointBuilder;

/**
 * Tagging and adding/retrieving baggage items from the active OpenTracing Span.
 * 
 * Generated by camel build tools - do NOT edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public interface SpanEndpointBuilderFactory {


    /**
     * Builder for endpoint for the OpenTracing Span component.
     */
    public interface SpanEndpointBuilder extends EndpointProducerBuilder {
        default AdvancedSpanEndpointBuilder advanced() {
            return (AdvancedSpanEndpointBuilder) this;
        }
        /**
         * Whether the producer should be started lazy (on the first message).
         * By starting lazy you can use this to allow CamelContext and routes to
         * startup in situations where a producer may otherwise fail during
         * starting and cause the route to fail being started. By deferring this
         * startup to be lazy then the startup failure can be handled during
         * routing messages via Camel's routing error handlers. Beware that when
         * the first message is processed then creating and starting the
         * producer may take a little time and prolong the total processing time
         * of the processing.
         * 
         * The option is a: <code>boolean</code> type.
         * 
         * Default: false
         * Group: producer
         */
        default SpanEndpointBuilder lazyStartProducer(boolean lazyStartProducer) {
            doSetProperty("lazyStartProducer", lazyStartProducer);
            return this;
        }
        /**
         * Whether the producer should be started lazy (on the first message).
         * By starting lazy you can use this to allow CamelContext and routes to
         * startup in situations where a producer may otherwise fail during
         * starting and cause the route to fail being started. By deferring this
         * startup to be lazy then the startup failure can be handled during
         * routing messages via Camel's routing error handlers. Beware that when
         * the first message is processed then creating and starting the
         * producer may take a little time and prolong the total processing time
         * of the processing.
         * 
         * The option will be converted to a <code>boolean</code> type.
         * 
         * Default: false
         * Group: producer
         */
        default SpanEndpointBuilder lazyStartProducer(String lazyStartProducer) {
            doSetProperty("lazyStartProducer", lazyStartProducer);
            return this;
        }
    }

    /**
     * Advanced builder for endpoint for the OpenTracing Span component.
     */
    public interface AdvancedSpanEndpointBuilder
            extends
                EndpointProducerBuilder {
        default SpanEndpointBuilder basic() {
            return (SpanEndpointBuilder) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * 
         * The option is a: <code>boolean</code> type.
         * 
         * Default: false
         * Group: advanced
         */
        default AdvancedSpanEndpointBuilder basicPropertyBinding(
                boolean basicPropertyBinding) {
            doSetProperty("basicPropertyBinding", basicPropertyBinding);
            return this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * 
         * The option will be converted to a <code>boolean</code> type.
         * 
         * Default: false
         * Group: advanced
         */
        default AdvancedSpanEndpointBuilder basicPropertyBinding(
                String basicPropertyBinding) {
            doSetProperty("basicPropertyBinding", basicPropertyBinding);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * 
         * The option is a: <code>boolean</code> type.
         * 
         * Default: false
         * Group: advanced
         */
        default AdvancedSpanEndpointBuilder synchronous(boolean synchronous) {
            doSetProperty("synchronous", synchronous);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * 
         * The option will be converted to a <code>boolean</code> type.
         * 
         * Default: false
         * Group: advanced
         */
        default AdvancedSpanEndpointBuilder synchronous(String synchronous) {
            doSetProperty("synchronous", synchronous);
            return this;
        }
    }

    public interface SpanBuilders {
        /**
         * OpenTracing Span (camel-opentracing)
         * Tagging and adding/retrieving baggage items from the active
         * OpenTracing Span.
         * 
         * Category: monitoring
         * Since: 3.4
         * Maven coordinates: org.apache.camel:camel-opentracing
         * 
         * Syntax: <code>opentracing-span:operation</code>
         * 
         * Path parameter: operation (required)
         * The operation to perform on the active Span.
         * The value can be one of: tag, log, setBaggage, getBaggage
         * 
         * Path parameter: spanKey
         * The tag or baggage item key on the Span. For tag or setBaggage
         * operations it's the key that will be set on the Span, for getBaggage
         * it's the key that will be used to retrieve from the Span.
         * 
         * Path parameter: valueHeader
         * The name of the Exchange message header where the the value will be
         * retrieved from or assigned to. For tag or setBaggage it's the name of
         * the header whose value will be set on the Span, for getBaggage it's
         * the name of the header where the value retrieved from the Span will
         * be assigned to.
         * 
         * @param path operation
         */
        default SpanEndpointBuilder opentracingSpan(String path) {
            return SpanEndpointBuilderFactory.endpointBuilder("opentracing-span", path);
        }
        /**
         * OpenTracing Span (camel-opentracing)
         * Tagging and adding/retrieving baggage items from the active
         * OpenTracing Span.
         * 
         * Category: monitoring
         * Since: 3.4
         * Maven coordinates: org.apache.camel:camel-opentracing
         * 
         * Syntax: <code>opentracing-span:operation</code>
         * 
         * Path parameter: operation (required)
         * The operation to perform on the active Span.
         * The value can be one of: tag, log, setBaggage, getBaggage
         * 
         * Path parameter: spanKey
         * The tag or baggage item key on the Span. For tag or setBaggage
         * operations it's the key that will be set on the Span, for getBaggage
         * it's the key that will be used to retrieve from the Span.
         * 
         * Path parameter: valueHeader
         * The name of the Exchange message header where the the value will be
         * retrieved from or assigned to. For tag or setBaggage it's the name of
         * the header whose value will be set on the Span, for getBaggage it's
         * the name of the header where the value retrieved from the Span will
         * be assigned to.
         * 
         * @param componentName to use a custom component name for the endpoint
         * instead of the default name
         * @param path operation
         */
        default SpanEndpointBuilder opentracingSpan(
                String componentName,
                String path) {
            return SpanEndpointBuilderFactory.endpointBuilder(componentName, path);
        }
    }
    static SpanEndpointBuilder endpointBuilder(String componentName, String path) {
        class SpanEndpointBuilderImpl extends AbstractEndpointBuilder implements SpanEndpointBuilder, AdvancedSpanEndpointBuilder {
            public SpanEndpointBuilderImpl(String path) {
                super(componentName, path);
            }
        }
        return new SpanEndpointBuilderImpl(path);
    }
}